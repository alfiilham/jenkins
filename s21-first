pipeline {
    agent any
    environment {
        APP_NAME = 'php-app'
        OPENSHIFT_PROJECT = 'test'
        OC_TOKEN = 'sha256~bEOsvMxVwzbwT-ig1Yq-S0jSy0vg6qCxFEqRknm8fgo'
        GIT_REPO_URL = 'https://gitlab.com/firstgroup2112743/sample-project-devops.git'  // GitLab repository URL without protocol
        SECRET_NAME = 'gitlab-token'
        GITLAB_USERNAME = 'alfiilham'  // Jenkins credentials ID for GitLab username
        GITLAB_TOKEN = 'glpat-YHrWhNHBD88pnykV_zGD'        // Jenkins credentials ID for GitLab access token
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the repository (Git, for example)
                checkout scm
            }
        }

        stage('Login to OpenShift') {
            steps {
                script {
                    echo "Logging into OpenShift"
                    sh '''
                    oc login --token=${OC_TOKEN} --server=https://10.20.10.221:6443 --insecure-skip-tls-verify=true
                    oc project ${OPENSHIFT_PROJECT}
                    '''
                }
            }
        }

        stage('Create GitLab Basic Auth Secret') {
            steps {
                script {
                    echo "Checking if GitLab Basic Auth secret '${SECRET_NAME}' exists in OpenShift..."
                    sh '''
                    if ! oc get secret ${SECRET_NAME} -n ${OPENSHIFT_PROJECT} >/dev/null 2>&1; then
                        echo "Secret '${SECRET_NAME}' does not exist. Creating it now..."
                        cat <<EOF | oc apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: ${SECRET_NAME}
  namespace: ${OPENSHIFT_PROJECT}
type: kubernetes.io/basic-auth
stringData:
  username: ${GITLAB_USERNAME}
  password: ${GITLAB_TOKEN}
EOF
                    else
                        echo "Secret '${SECRET_NAME}' already exists. Skipping creation."
                    fi
                    '''
                }
            }
        }

        stage('Create or Update BuildConfig') {
            steps {
                script {
                    echo "Creating or updating BuildConfig for ${APP_NAME}"
                    sh '''
                    cat <<EOF | oc apply -f -
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: ${APP_NAME}
  namespace: ${OPENSHIFT_PROJECT}
spec:
  source:
    type: Git
    git:
      uri: '${GIT_REPO_URL}'  # Use GitLab
      ref: main
    sourceSecret:
      name: ${SECRET_NAME}
  strategy:
    type: Docker
  output:
    to:
      kind: ImageStreamTag
      name: '${APP_NAME}:latest'
EOF
                    '''
                }
            }
        }

        stage('Start Build in OpenShift') {
            steps {
                script {
                    echo "Starting the build in OpenShift for ${APP_NAME}"
                    sh '''
                    if ! oc get imagestream ${APP_NAME} -n ${OPENSHIFT_PROJECT} >/dev/null 2>&1; then
                        echo "ImageStream ${APP_NAME} does not exist. Creating it now..."
                        oc create imagestream ${APP_NAME} -n ${OPENSHIFT_PROJECT}
                    else
                        echo "ImageStream ${APP_NAME} already exists. Skipping creation."
                    fi
                    oc start-build ${APP_NAME} --wait
                    '''
                }
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                script {
                    echo "Deploying the application in OpenShift"
                    sh '''
                    cat <<EOF | oc apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${OPENSHIFT_PROJECT}
spec:
  selector:
    matchLabels:
      app: ${APP_NAME}
  replicas: 1
  template:
    metadata:
      labels:
        app: ${APP_NAME}
    spec:
      containers:
        - name: ${APP_NAME}
          image: image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_PROJECT}/${APP_NAME}:latest
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: DB_HOST
              value: mariadb
            - name: DB_USER
              value: mariadb
            - name: DB_PASS
              value: mariadb
            - name: DB_NAME
              value: akademik
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}
  namespace: ${OPENSHIFT_PROJECT}
spec:
  selector:
    app: ${APP_NAME}
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: ${APP_NAME}
  namespace: ${OPENSHIFT_PROJECT}
spec:
  to:
    kind: Service
    name: ${APP_NAME}
  port:
    targetPort: 8080
  tls: {}
EOF
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Deployment to OpenShift succeeded!'
        }
        failure {
            echo 'Deployment to OpenShift failed!'
        }
    }
}
